```julia
@time model_def(data...)();
```

```julia
m = time_model_def(model_def, data...);
```

```julia
suite = make_suite(m);
results = run(suite; seconds=WEAVE_ARGS[:seconds]);
```

```julia
results["evaluation_untyped"]
```

```julia
results["evaluation_typed"]
```

```julia
let k = "evaluation_simple_varinfo_nt"
    haskey(results, k) && results[k]
end
```

```julia
let k = "evaluation_simple_varinfo_componentarray"
    haskey(results, k) && results[k]
end
```

```julia
let k = "evaluation_simple_varinfo_dict"
    haskey(results, k) && results[k]
end
```

```julia
let k = "evaluation_simple_varinfo_dict_from_nt"
    haskey(results, k) && results[k]
end
```

```julia; echo=false; results="hidden";
BenchmarkTools.save(
    joinpath("results", WEAVE_ARGS[:name], "$(nameof(m))_benchmarks.json"), results
)
```

```julia; wrap=false; echo=false
if WEAVE_ARGS[:include_typed_code]
    typed = typed_code(m)
end
```

```julia; echo=false; results="hidden"
if WEAVE_ARGS[:include_typed_code]
    # Serialize the output of `typed_code` so we can compare later.
    haskey(WEAVE_ARGS, :name) && serialize(joinpath("results", WEAVE_ARGS[:name],"$(nameof(m)).jls"), string(typed));
end
```

```julia; wrap=false; echo=false;
if WEAVE_ARGS[:include_typed_code] && haskey(WEAVE_ARGS, :name_old)
    # We want to compare the generated code to the previous version.
    import DiffUtils
    typed_old = deserialize(joinpath("results", WEAVE_ARGS[:name_old], "$(nameof(m)).jls"));
    DiffUtils.diff(typed_old, string(typed), width=130)
end
```